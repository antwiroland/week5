AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate Service Stack with CodeDeploy Blue-Green Deployment'

Parameters:
  AppName:
    Type: String
    Default: 'java-full-stack'
  DeploymentTimestamp:
    Type: String
    Default: "default"
    Description: 'Timestamp to force changeset creation'

Resources:
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-Task
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !ImportValue 
        Fn::Sub: '${AppName}-ECSTaskExecutionRoleArn'
      TaskRoleArn: !ImportValue 
        Fn::Sub: '${AppName}-ECSTaskRoleArn'
      ContainerDefinitions:
        - Name: !Sub ${AppName}-Container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}:latest"
          Environment: []
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue 
                Fn::Sub: '${AppName}-CloudWatchLogGroupName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-Green-TG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue 
        Fn::Sub: '${AppName}-VPCId'
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

  TestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !ImportValue 
        Fn::Sub: '${AppName}-ALBArn'
      Port: 9000
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GreenTargetGroup

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AppName}-Service
      Cluster: !ImportValue 
        Fn::Sub: '${AppName}-ECSClusterName'
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - TargetGroupArn: !ImportValue 
            Fn::Sub: '${AppName}-ALBTargetGroupArn'
          ContainerName: !Sub ${AppName}-Container
          ContainerPort: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !ImportValue 
                Fn::Sub: '${AppName}-PrivateSubnet1Id'
            - !ImportValue 
                Fn::Sub: '${AppName}-PrivateSubnet2Id'
          SecurityGroups:
            - !ImportValue 
                Fn::Sub: '${AppName}-ECSSecurityGroupId'

  # --- Auto Scaling & CodeDeploy ---
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${AppName}-Cluster/${AppName}-Service
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AppName}-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AppName}-CodeDeploy-App
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: ECSService
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: !Sub ${AppName}-CodeDeploy-DG
      ServiceRoleArn: !ImportValue 
        Fn::Sub: '${AppName}-CodeDeployServiceRoleArn'
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
      ECSServices:
        - ServiceName: !GetAtt ECSService.Name
          ClusterName: !ImportValue 
            Fn::Sub: '${AppName}-ECSClusterName'
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue 
                  Fn::Sub: '${AppName}-ALBTargetGroupName'
              - Name: !GetAtt GreenTargetGroup.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue 
                    Fn::Sub: '${AppName}-ALBListenerArn'
            TestTrafficRoute:
              ListenerArns:
                - !Ref TestListener

Outputs:
  ECSServiceName:
    Value: !Ref ECSService
    Export:
      Name: !Sub ${AppName}-ECSServiceName
  CodeDeployAppName:
    Value: !Ref CodeDeployApp
    Export:
      Name: !Sub ${AppName}-CodeDeployAppName
  CodeDeployDeploymentGroupName:
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub ${AppName}-CodeDeployDeploymentGroupName
  TestListenerArn:
    Value: !Ref TestListener
    Export:
      Name: !Sub ${AppName}-TestListenerArn
  GreenTargetGroupName:
    Value: !GetAtt GreenTargetGroup.TargetGroupName
    Export:
      Name: !Sub ${AppName}-GreenTargetGroupName
  ScalableTargetId:
    Value: !Ref ScalableTarget
    Export:
      Name: !Sub ${AppName}-ScalableTargetId
  DeploymentTimestamp:
    Value: !Ref DeploymentTimestamp
    Export:
      Name: !Sub ${AppName}-DeploymentTimestamp