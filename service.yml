AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate Service Stack with Auto Scaling'

Parameters:
  AppName:
    Type: String
    Default: 'java-full-stack'
  DeploymentTimestamp:
    Type: String
    Default: "default"
    Description: 'Timestamp to force changeset creation'

Resources:
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-Task
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !ImportValue 'java-full-stack-ECSTaskExecutionRoleArn'
      TaskRoleArn: !ImportValue 'java-full-stack-ECSTaskRoleArn'
      ContainerDefinitions:
        - Name: !Sub ${AppName}-Container
          Image: !Sub
            - "${ECRRepoURI}:latest"
            - ECRRepoURI: !ImportValue 'java-full-stack-ECRRepositoryURI'
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue 'java-full-stack-CloudWatchLogGroupName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AppName}-Service
      Cluster: !ImportValue 'java-full-stack-ECSClusterName'
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - TargetGroupArn: !ImportValue 'java-full-stack-ALBTargetGroupArn'
          ContainerName: !Sub ${AppName}-Container
          ContainerPort: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !ImportValue 'java-full-stack-PrivateSubnet1Id'
            - !ImportValue 'java-full-stack-PrivateSubnet2Id'
          SecurityGroups:
            - !ImportValue 'java-full-stack-ECSSecurityGroupId'

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub
        - service/${ClusterName}/${ServiceName}
        - ClusterName: !ImportValue 'java-full-stack-ECSClusterName'
          ServiceName: !GetAtt ECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AppName}-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  ServiceURL:
    Description: 'URL to access the application'
    Value: !Sub
      - "http://${ALBDNSName}"
      - ALBDNSName: !ImportValue 'java-full-stack-ALBDNSName'
    Export:
      Name: !Sub ${AppName}-ServiceURL

  ECSServiceName:
    Description: 'ECS Service Name'
    Value: !Ref ECSService
    Export:
      Name: !Sub ${AppName}-ECSServiceName

  ScalableTargetId:
    Description: 'Application Auto Scaling Target ID'
    Value: !Ref ScalableTarget
    Export:
      Name: !Sub ${AppName}-ScalableTargetId

  DeploymentTimestamp:
    Description: 'Timestamp of last deployment'
    Value: !Ref DeploymentTimestamp
    Export:
      Name: !Sub ${AppName}-DeploymentTimestamp