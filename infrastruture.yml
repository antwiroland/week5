AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate CI/CD Lab Infrastructure with CodeDeploy and Pipeline Roles'

Parameters:
  AppName:
    Type: String
    Default: 'java-full-stack'

Resources:
  # CodeDeploy ECS Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${AppName}-CodeDeployApp'
      ComputePlatform: ECS

  # CodeDeploy ECS Deployment Group (fixed ECSService issue)
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${AppName}-DeploymentGroup'
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 1
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Sub '${AppName}-BlueTG'
              - Name: !Sub '${AppName}-GreenTG'
            ProdTrafficRoute:
              ListenerArns:
                - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/${AppName}-ALB/...'
            TestTrafficRoute:
              ListenerArns:
                - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/${AppName}-ALB/...'

  # IAM Role for CodeDeploy (INLINE POLICY)
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-CodeDeployRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployECSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateTaskSet
                  - ecs:UpdateService
                  - ecs:DeleteTaskSet
                  - ecs:DescribeServices
                  - ecs:DescribeTaskSets
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                Resource: "*"

  # IAM Role for CodePipeline (INLINE POLICY)
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-CodePipelineServiceRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineFullAccessInline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - iam:PassRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: "*"

  # Artifact bucket
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AppName}-artifact-bucket-${AWS::AccountId}-${AWS::Region}'

Outputs:
  CodeDeployAppName:
    Description: 'CodeDeploy Application Name'
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub '${AppName}-CodeDeployAppName'

  CodeDeployDeploymentGroupName:
    Description: 'CodeDeploy Deployment Group Name'
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub '${AppName}-CodeDeployDeploymentGroupName'

  CodePipelineServiceRoleArn:
    Description: 'IAM Role ARN for CodePipeline'
    Value: !GetAtt CodePipelineServiceRole.Arn
    Export:
      Name: !Sub '${AppName}-CodePipelineServiceRoleArn'

  ArtifactBucketName:
    Description: 'S3 bucket for pipeline artifacts'
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub '${AppName}-ArtifactBucketName'
